import 'package:task_app/core_needs/constants/database_constants.dart';
import 'package:task_app/data/database/database_model.dart';
import 'package:task_app/data/database/model_repository.dart';
import 'dart:convert';


class TaskRepository {
  final ModelRepository<TaskModel> taskRepository = ModelRepository<TaskModel>(
    tableName: TableNameConstant.tTask,
    createTableQuery: CreateTableConstant.cTask,
  );

  /// Insert a new task and return true if successful
  Future<bool> insertTask({required TaskModel taskModel}) async {
    return await taskRepository.insert(model: taskModel) != 0;
  }

  /// Update an existing task based on its ID
  Future<bool> updateTask({required TaskModel taskModel}) async {
    return await taskRepository.update(
      model: taskModel,
      where: 'id = ?',
      whereArgs: [taskModel.id],
    ) != 0;
  }

  /// Delete a task by ID
  Future<bool> deleteTask({required int taskId}) async {
    return await taskRepository.delete(
      where: 'id = ?',
      whereArgs: [taskId],
    ) != 0;
  }

  /// Get all tasks from the database
  Future<List<TaskModel>> getAllTasks() async {
    return await taskRepository.getAll(fromMap: TaskModel.fromMap);
  }
  Future<TaskModel> getTaskById({required int id}) async {
    List<TaskModel>tasks= await taskRepository.get(fromMap: TaskModel.fromMap,whereArgs:[id],where: "id");
    return tasks.first;
  }

}


class TaskModel extends DatabaseModel {
  final int? id; // Auto-incremented primary key
   String title;
   String? description;
   DateTime dueDate;
   String taskCategory;
   String priority;
   String repeat;
   List<int>? repeatList;
   String confirmed;
   String status;

  TaskModel({
    this.id, // Nullable since SQLite will auto-generate it
    required this.title,
    this.description,
    required this.dueDate,
    required this.taskCategory,
    required this.priority,
    required this.repeat,
    this.repeatList,
    required this.confirmed,
    required this.status
  });

  @override
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      // Auto-generated by SQLite
      'title': title,
      'description': description,
      'dueDate': dueDate.millisecondsSinceEpoch,
      // Store as timestamp
      'taskCategory': taskCategory,
      'priority': priority,
      'repeat': repeat,
      'repeatList': repeatList != null ? jsonEncode(repeatList) : null,
      'status':status,
      'confirmed':confirmed
      // Convert List<int> to JSON string
    };
  }

  factory TaskModel.fromMap(Map<String, dynamic> map) {
    return TaskModel(
      id: map['id'] as int?,
      title: map['title'] as String,
      description: map['description'] as String?,
      dueDate: DateTime.fromMillisecondsSinceEpoch(map['dueDate'] as int),
      // Convert back to DateTime
      taskCategory: map['taskCategory'] as String,
      priority: map['priority'] as String,
      repeat: map['repeat'] as String,
      confirmed: map["confirmed"]as String,
        status: map['status'] as String,
      repeatList: map['repeatList'] != null
          ? List<int>.from(jsonDecode(map['repeatList'] as String))
          : null, // Convert JSON string back to List<int>
    );
  }

  @override
  dynamic getId() => id;

  @override
  TaskModel fromMap(Map<String, dynamic> map) {
    return TaskModel.fromMap(map);
  }

  TaskModel copyWith({
    int? id,
    String? title,
    String? description,
    DateTime? dueDate,
    String? taskCategory,
    String? priority,
    String? repeat,
    List<int>? repeatList,
    String? confirmed,
    String? status,
  }) {
    return TaskModel(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      dueDate: dueDate ?? this.dueDate,
      taskCategory: taskCategory ?? this.taskCategory,
      priority: priority ?? this.priority,
      repeat: repeat ?? this.repeat,
      repeatList: repeatList ?? this.repeatList,
      confirmed: confirmed ?? this.confirmed,
      status: status ?? this.status,
    );
  }
}
